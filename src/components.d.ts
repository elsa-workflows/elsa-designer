/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  Activity,
  ActivityDefinition,
  ActivityDisplayMode,
  ImportedWorkflowData,
  Workflow,
  WorkflowFormatDescriptor,
} from './models';
import {
  ActivityMap,
} from './services/activity-definition-store';

export namespace Components {
  interface WfActivity {
    'activityId': string;
    'left': number;
    'state': string;
    'top': number;
    'type': string;
  }
  interface WfActivityDefinition {
    'category': string;
    'description': string;
    'displayName': string;
    'outcomes': string;
    'type': string;
  }
  interface WfActivityDefinitionProperty {
    'hint': string;
    'label': string;
    'name': string;
    'type': string;
  }
  interface WfActivityEditorModal {
    'activity': Activity;
    'hide': () => Promise<void>;
    'show': () => Promise<void>;
  }
  interface WfActivityLibrary {
    'registerActivity': (activity: ActivityDefinition) => Promise<void>;
  }
  interface WfActivityPicker {
    'hide': () => Promise<void>;
    'show': () => Promise<void>;
  }
  interface WfActivityRenderer {
    'activity': Activity;
    'activityDefinition': ActivityDefinition;
    'displayMode': ActivityDisplayMode;
  }
  interface WfConnection {
    'destinationActivityId': string;
    'outcome': string;
    'sourceActivityId': string;
  }
  interface WfContextMenu {
    'handleContextMenuEvent': (e: MouseEvent) => Promise<void>;
    'target': HTMLElement;
    'targetSelector': string;
  }
  interface WfContextMenuItem {
    'text': any;
  }
  interface WfDesigner {
    'activityDefinitions': ActivityMap;
    'addActivity': (activityDefinition: ActivityDefinition) => Promise<void>;
    'updateActivity': (activity: Activity) => Promise<void>;
    'workflow': Workflow;
  }
  interface WfDesignerHost {}
  interface WfExportButton {}
  interface WfFork {
    'category': string;
    'description': string;
    'displayName': string;
    'type': string;
  }
  interface WfHttpRequestEvent {
    'category': string;
    'description': string;
    'displayName': string;
    'type': string;
  }
  interface WfHttpResponseTask {
    'category': string;
    'description': string;
    'displayName': string;
    'type': string;
  }
  interface WfImportButton {}
  interface WfImportExport {
    'export': (designer: HTMLWfDesignerElement, formatDescriptor: WorkflowFormatDescriptor) => Promise<void>;
    'import': (designer: HTMLWfDesignerElement, data: ImportedWorkflowData) => Promise<void>;
  }
  interface WfLog {
    'category': string;
    'description': string;
    'displayName': string;
    'type': string;
  }
  interface WfReadLine {
    'category': string;
    'description': string;
    'displayName': string;
    'type': string;
  }
  interface WfReceiveMasstransitMessage {
    'category': string;
    'description': string;
    'displayName': string;
    'type': string;
  }
  interface WfSendEmail {
    'category': string;
    'description': string;
    'displayName': string;
    'type': string;
  }
  interface WfSendMasstransitMessage {
    'category': string;
    'description': string;
    'displayName': string;
    'type': string;
  }
  interface WfSetVariable {
    'category': string;
    'description': string;
    'displayName': string;
    'type': string;
  }
  interface WfTimerEvent {
    'category': string;
    'description': string;
    'displayName': string;
    'type': string;
  }
  interface WfWriteLine {
    'category': string;
    'description': string;
    'displayName': string;
    'type': string;
  }
}

declare global {


  interface HTMLWfActivityElement extends Components.WfActivity, HTMLStencilElement {}
  var HTMLWfActivityElement: {
    prototype: HTMLWfActivityElement;
    new (): HTMLWfActivityElement;
  };

  interface HTMLWfActivityDefinitionElement extends Components.WfActivityDefinition, HTMLStencilElement {}
  var HTMLWfActivityDefinitionElement: {
    prototype: HTMLWfActivityDefinitionElement;
    new (): HTMLWfActivityDefinitionElement;
  };

  interface HTMLWfActivityDefinitionPropertyElement extends Components.WfActivityDefinitionProperty, HTMLStencilElement {}
  var HTMLWfActivityDefinitionPropertyElement: {
    prototype: HTMLWfActivityDefinitionPropertyElement;
    new (): HTMLWfActivityDefinitionPropertyElement;
  };

  interface HTMLWfActivityEditorModalElement extends Components.WfActivityEditorModal, HTMLStencilElement {}
  var HTMLWfActivityEditorModalElement: {
    prototype: HTMLWfActivityEditorModalElement;
    new (): HTMLWfActivityEditorModalElement;
  };

  interface HTMLWfActivityLibraryElement extends Components.WfActivityLibrary, HTMLStencilElement {}
  var HTMLWfActivityLibraryElement: {
    prototype: HTMLWfActivityLibraryElement;
    new (): HTMLWfActivityLibraryElement;
  };

  interface HTMLWfActivityPickerElement extends Components.WfActivityPicker, HTMLStencilElement {}
  var HTMLWfActivityPickerElement: {
    prototype: HTMLWfActivityPickerElement;
    new (): HTMLWfActivityPickerElement;
  };

  interface HTMLWfActivityRendererElement extends Components.WfActivityRenderer, HTMLStencilElement {}
  var HTMLWfActivityRendererElement: {
    prototype: HTMLWfActivityRendererElement;
    new (): HTMLWfActivityRendererElement;
  };

  interface HTMLWfConnectionElement extends Components.WfConnection, HTMLStencilElement {}
  var HTMLWfConnectionElement: {
    prototype: HTMLWfConnectionElement;
    new (): HTMLWfConnectionElement;
  };

  interface HTMLWfContextMenuElement extends Components.WfContextMenu, HTMLStencilElement {}
  var HTMLWfContextMenuElement: {
    prototype: HTMLWfContextMenuElement;
    new (): HTMLWfContextMenuElement;
  };

  interface HTMLWfContextMenuItemElement extends Components.WfContextMenuItem, HTMLStencilElement {}
  var HTMLWfContextMenuItemElement: {
    prototype: HTMLWfContextMenuItemElement;
    new (): HTMLWfContextMenuItemElement;
  };

  interface HTMLWfDesignerElement extends Components.WfDesigner, HTMLStencilElement {}
  var HTMLWfDesignerElement: {
    prototype: HTMLWfDesignerElement;
    new (): HTMLWfDesignerElement;
  };

  interface HTMLWfDesignerHostElement extends Components.WfDesignerHost, HTMLStencilElement {}
  var HTMLWfDesignerHostElement: {
    prototype: HTMLWfDesignerHostElement;
    new (): HTMLWfDesignerHostElement;
  };

  interface HTMLWfExportButtonElement extends Components.WfExportButton, HTMLStencilElement {}
  var HTMLWfExportButtonElement: {
    prototype: HTMLWfExportButtonElement;
    new (): HTMLWfExportButtonElement;
  };

  interface HTMLWfForkElement extends Components.WfFork, HTMLStencilElement {}
  var HTMLWfForkElement: {
    prototype: HTMLWfForkElement;
    new (): HTMLWfForkElement;
  };

  interface HTMLWfHttpRequestEventElement extends Components.WfHttpRequestEvent, HTMLStencilElement {}
  var HTMLWfHttpRequestEventElement: {
    prototype: HTMLWfHttpRequestEventElement;
    new (): HTMLWfHttpRequestEventElement;
  };

  interface HTMLWfHttpResponseTaskElement extends Components.WfHttpResponseTask, HTMLStencilElement {}
  var HTMLWfHttpResponseTaskElement: {
    prototype: HTMLWfHttpResponseTaskElement;
    new (): HTMLWfHttpResponseTaskElement;
  };

  interface HTMLWfImportButtonElement extends Components.WfImportButton, HTMLStencilElement {}
  var HTMLWfImportButtonElement: {
    prototype: HTMLWfImportButtonElement;
    new (): HTMLWfImportButtonElement;
  };

  interface HTMLWfImportExportElement extends Components.WfImportExport, HTMLStencilElement {}
  var HTMLWfImportExportElement: {
    prototype: HTMLWfImportExportElement;
    new (): HTMLWfImportExportElement;
  };

  interface HTMLWfLogElement extends Components.WfLog, HTMLStencilElement {}
  var HTMLWfLogElement: {
    prototype: HTMLWfLogElement;
    new (): HTMLWfLogElement;
  };

  interface HTMLWfReadLineElement extends Components.WfReadLine, HTMLStencilElement {}
  var HTMLWfReadLineElement: {
    prototype: HTMLWfReadLineElement;
    new (): HTMLWfReadLineElement;
  };

  interface HTMLWfReceiveMasstransitMessageElement extends Components.WfReceiveMasstransitMessage, HTMLStencilElement {}
  var HTMLWfReceiveMasstransitMessageElement: {
    prototype: HTMLWfReceiveMasstransitMessageElement;
    new (): HTMLWfReceiveMasstransitMessageElement;
  };

  interface HTMLWfSendEmailElement extends Components.WfSendEmail, HTMLStencilElement {}
  var HTMLWfSendEmailElement: {
    prototype: HTMLWfSendEmailElement;
    new (): HTMLWfSendEmailElement;
  };

  interface HTMLWfSendMasstransitMessageElement extends Components.WfSendMasstransitMessage, HTMLStencilElement {}
  var HTMLWfSendMasstransitMessageElement: {
    prototype: HTMLWfSendMasstransitMessageElement;
    new (): HTMLWfSendMasstransitMessageElement;
  };

  interface HTMLWfSetVariableElement extends Components.WfSetVariable, HTMLStencilElement {}
  var HTMLWfSetVariableElement: {
    prototype: HTMLWfSetVariableElement;
    new (): HTMLWfSetVariableElement;
  };

  interface HTMLWfTimerEventElement extends Components.WfTimerEvent, HTMLStencilElement {}
  var HTMLWfTimerEventElement: {
    prototype: HTMLWfTimerEventElement;
    new (): HTMLWfTimerEventElement;
  };

  interface HTMLWfWriteLineElement extends Components.WfWriteLine, HTMLStencilElement {}
  var HTMLWfWriteLineElement: {
    prototype: HTMLWfWriteLineElement;
    new (): HTMLWfWriteLineElement;
  };
  interface HTMLElementTagNameMap {
    'wf-activity': HTMLWfActivityElement;
    'wf-activity-definition': HTMLWfActivityDefinitionElement;
    'wf-activity-definition-property': HTMLWfActivityDefinitionPropertyElement;
    'wf-activity-editor-modal': HTMLWfActivityEditorModalElement;
    'wf-activity-library': HTMLWfActivityLibraryElement;
    'wf-activity-picker': HTMLWfActivityPickerElement;
    'wf-activity-renderer': HTMLWfActivityRendererElement;
    'wf-connection': HTMLWfConnectionElement;
    'wf-context-menu': HTMLWfContextMenuElement;
    'wf-context-menu-item': HTMLWfContextMenuItemElement;
    'wf-designer': HTMLWfDesignerElement;
    'wf-designer-host': HTMLWfDesignerHostElement;
    'wf-export-button': HTMLWfExportButtonElement;
    'wf-fork': HTMLWfForkElement;
    'wf-http-request-event': HTMLWfHttpRequestEventElement;
    'wf-http-response-task': HTMLWfHttpResponseTaskElement;
    'wf-import-button': HTMLWfImportButtonElement;
    'wf-import-export': HTMLWfImportExportElement;
    'wf-log': HTMLWfLogElement;
    'wf-read-line': HTMLWfReadLineElement;
    'wf-receive-masstransit-message': HTMLWfReceiveMasstransitMessageElement;
    'wf-send-email': HTMLWfSendEmailElement;
    'wf-send-masstransit-message': HTMLWfSendMasstransitMessageElement;
    'wf-set-variable': HTMLWfSetVariableElement;
    'wf-timer-event': HTMLWfTimerEventElement;
    'wf-write-line': HTMLWfWriteLineElement;
  }
}

declare namespace LocalJSX {
  interface WfActivity extends JSXBase.HTMLAttributes<HTMLWfActivityElement> {
    'activityId'?: string;
    'left'?: number;
    'state'?: string;
    'top'?: number;
    'type'?: string;
  }
  interface WfActivityDefinition extends JSXBase.HTMLAttributes<HTMLWfActivityDefinitionElement> {
    'category'?: string;
    'description'?: string;
    'displayName'?: string;
    'outcomes'?: string;
    'type'?: string;
  }
  interface WfActivityDefinitionProperty extends JSXBase.HTMLAttributes<HTMLWfActivityDefinitionPropertyElement> {
    'hint'?: string;
    'label'?: string;
    'name'?: string;
    'type'?: string;
  }
  interface WfActivityEditorModal extends JSXBase.HTMLAttributes<HTMLWfActivityEditorModalElement> {
    'activity'?: Activity;
    'onUpdate-activity'?: (event: CustomEvent<any>) => void;
  }
  interface WfActivityLibrary extends JSXBase.HTMLAttributes<HTMLWfActivityLibraryElement> {}
  interface WfActivityPicker extends JSXBase.HTMLAttributes<HTMLWfActivityPickerElement> {
    'onActivity-picked'?: (event: CustomEvent<any>) => void;
  }
  interface WfActivityRenderer extends JSXBase.HTMLAttributes<HTMLWfActivityRendererElement> {
    'activity'?: Activity;
    'activityDefinition'?: ActivityDefinition;
    'displayMode'?: ActivityDisplayMode;
  }
  interface WfConnection extends JSXBase.HTMLAttributes<HTMLWfConnectionElement> {
    'destinationActivityId'?: string;
    'outcome'?: string;
    'sourceActivityId'?: string;
  }
  interface WfContextMenu extends JSXBase.HTMLAttributes<HTMLWfContextMenuElement> {
    'onContext-menu'?: (event: CustomEvent<any>) => void;
    'target'?: HTMLElement;
    'targetSelector'?: string;
  }
  interface WfContextMenuItem extends JSXBase.HTMLAttributes<HTMLWfContextMenuItemElement> {
    'text'?: any;
  }
  interface WfDesigner extends JSXBase.HTMLAttributes<HTMLWfDesignerElement> {
    'activityDefinitions'?: ActivityMap;
    'onAdd-activity'?: (event: CustomEvent<any>) => void;
    'onEdit-activity'?: (event: CustomEvent<any>) => void;
    'workflow'?: Workflow;
  }
  interface WfDesignerHost extends JSXBase.HTMLAttributes<HTMLWfDesignerHostElement> {}
  interface WfExportButton extends JSXBase.HTMLAttributes<HTMLWfExportButtonElement> {
    'onExport-workflow'?: (event: CustomEvent<any>) => void;
  }
  interface WfFork extends JSXBase.HTMLAttributes<HTMLWfForkElement> {
    'category'?: string;
    'description'?: string;
    'displayName'?: string;
    'type'?: string;
  }
  interface WfHttpRequestEvent extends JSXBase.HTMLAttributes<HTMLWfHttpRequestEventElement> {
    'category'?: string;
    'description'?: string;
    'displayName'?: string;
    'type'?: string;
  }
  interface WfHttpResponseTask extends JSXBase.HTMLAttributes<HTMLWfHttpResponseTaskElement> {
    'category'?: string;
    'description'?: string;
    'displayName'?: string;
    'type'?: string;
  }
  interface WfImportButton extends JSXBase.HTMLAttributes<HTMLWfImportButtonElement> {
    'onImport-workflow'?: (event: CustomEvent<any>) => void;
  }
  interface WfImportExport extends JSXBase.HTMLAttributes<HTMLWfImportExportElement> {}
  interface WfLog extends JSXBase.HTMLAttributes<HTMLWfLogElement> {
    'category'?: string;
    'description'?: string;
    'displayName'?: string;
    'type'?: string;
  }
  interface WfReadLine extends JSXBase.HTMLAttributes<HTMLWfReadLineElement> {
    'category'?: string;
    'description'?: string;
    'displayName'?: string;
    'type'?: string;
  }
  interface WfReceiveMasstransitMessage extends JSXBase.HTMLAttributes<HTMLWfReceiveMasstransitMessageElement> {
    'category'?: string;
    'description'?: string;
    'displayName'?: string;
    'type'?: string;
  }
  interface WfSendEmail extends JSXBase.HTMLAttributes<HTMLWfSendEmailElement> {
    'category'?: string;
    'description'?: string;
    'displayName'?: string;
    'type'?: string;
  }
  interface WfSendMasstransitMessage extends JSXBase.HTMLAttributes<HTMLWfSendMasstransitMessageElement> {
    'category'?: string;
    'description'?: string;
    'displayName'?: string;
    'type'?: string;
  }
  interface WfSetVariable extends JSXBase.HTMLAttributes<HTMLWfSetVariableElement> {
    'category'?: string;
    'description'?: string;
    'displayName'?: string;
    'type'?: string;
  }
  interface WfTimerEvent extends JSXBase.HTMLAttributes<HTMLWfTimerEventElement> {
    'category'?: string;
    'description'?: string;
    'displayName'?: string;
    'type'?: string;
  }
  interface WfWriteLine extends JSXBase.HTMLAttributes<HTMLWfWriteLineElement> {
    'category'?: string;
    'description'?: string;
    'displayName'?: string;
    'type'?: string;
  }

  interface IntrinsicElements {
    'wf-activity': WfActivity;
    'wf-activity-definition': WfActivityDefinition;
    'wf-activity-definition-property': WfActivityDefinitionProperty;
    'wf-activity-editor-modal': WfActivityEditorModal;
    'wf-activity-library': WfActivityLibrary;
    'wf-activity-picker': WfActivityPicker;
    'wf-activity-renderer': WfActivityRenderer;
    'wf-connection': WfConnection;
    'wf-context-menu': WfContextMenu;
    'wf-context-menu-item': WfContextMenuItem;
    'wf-designer': WfDesigner;
    'wf-designer-host': WfDesignerHost;
    'wf-export-button': WfExportButton;
    'wf-fork': WfFork;
    'wf-http-request-event': WfHttpRequestEvent;
    'wf-http-response-task': WfHttpResponseTask;
    'wf-import-button': WfImportButton;
    'wf-import-export': WfImportExport;
    'wf-log': WfLog;
    'wf-read-line': WfReadLine;
    'wf-receive-masstransit-message': WfReceiveMasstransitMessage;
    'wf-send-email': WfSendEmail;
    'wf-send-masstransit-message': WfSendMasstransitMessage;
    'wf-set-variable': WfSetVariable;
    'wf-timer-event': WfTimerEvent;
    'wf-write-line': WfWriteLine;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


